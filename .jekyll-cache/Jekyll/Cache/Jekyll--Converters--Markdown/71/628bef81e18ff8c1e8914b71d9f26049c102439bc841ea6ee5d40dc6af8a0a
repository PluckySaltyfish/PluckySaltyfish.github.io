I"'<h5 id="问题描述">问题描述</h5>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">三个法师康的工人每天早上<span class="sb">`</span>6点<span class="sb">`</span>到工厂开始到三条产品生产线上组装桔子手机。
第一个工人在200时刻开始（从6点开始计时，以秒作为单位）在生产线上开始生产，一直到1000时刻。
第二个工人，在700时刻开始，在1100时刻结束。
第三个工人从1500时刻工作到2100时刻。
期间最长至少有一个工人在生产线上工作的连续时间为900秒（从200时刻到1100时刻），
而最长的无人生产的连续时间（从生产开始到生产结束）为400时刻（1100时刻到1500时刻）。
你的任务是用一个程序衡量N个工人在N条产品线上的工作时间列表（1≤N≤5000，以秒为单位）。
    ·最长的至少有一个工人在工作的时间段
    ·最长的无人工作的时间段（从有人工作开始计）
输入第1行为一个整数N，第2-N+1行每行包括两个均小于1000000的非负整数数据，
表示其中一个工人的生产开始时间与结束时间。输出为一行，用空格分隔开两个我们所求的数。</code></pre></figure>

<h5 id="样例输入">样例输入</h5>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3
200 1000
700 1100
1500 2100
</code></pre></div></div>

<h5 id="样子输出">样子输出</h5>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>900 400
</code></pre></div></div>

<h5 id="难度2">难度：2</h5>
<h5 id="考察贪心算法-排序">考察：贪心算法 排序</h5>
<h5 id="分析">分析</h5>
<p>将开始时间和结束时间储存为一个<code class="language-plaintext highlighter-rouge">pair</code>，按照<code class="language-plaintext highlighter-rouge">起始时间</code>从大到小对<code class="language-plaintext highlighter-rouge">pair数组</code>进行排序，从前向后遍历算出所求。<br />
贪心在哪呢？应该是贪在总是寻找开始时间最早的生产线吧。</p>
<h5 id="参考代码">参考代码</h5>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;cstdio&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
</span><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">MAX_N</span> <span class="o">=</span> <span class="mi">5001</span><span class="p">;</span>
<span class="k">typedef</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">P</span><span class="p">;</span>

<span class="n">bool</span> <span class="nf">a_less_b</span><span class="p">(</span><span class="n">P</span> <span class="n">p1</span><span class="p">,</span><span class="n">P</span> <span class="n">p2</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">return</span> <span class="n">p1</span><span class="p">.</span><span class="n">first</span> <span class="o">&lt;</span> <span class="n">p2</span><span class="p">.</span><span class="n">first</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>

    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">start</span><span class="p">,</span><span class="n">end</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">current_start</span><span class="p">,</span><span class="n">current_end</span><span class="p">,</span><span class="n">current_max_busy</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">current_max_vacancy</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
    <span class="n">P</span> <span class="n">p</span><span class="p">[</span><span class="n">MAX_N</span><span class="p">];</span>
    <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">start</span><span class="p">);</span>
        <span class="n">scanf</span><span class="p">(</span><span class="s">"%d"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">end</span><span class="p">);</span>
        <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span><span class="n">P</span><span class="p">(</span><span class="n">start</span><span class="p">,</span><span class="n">end</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">sort</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">p</span><span class="o">+</span><span class="n">n</span><span class="p">,</span><span class="n">a_less_b</span><span class="p">);</span>

    <span class="n">current_start</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">first</span><span class="p">;</span>
    <span class="n">current_end</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="o">&lt;=</span><span class="n">current_end</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="o">&gt;</span><span class="n">current_end</span><span class="p">)</span><span class="n">current_end</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span><span class="p">{</span>
            <span class="kt">int</span> <span class="n">vacancy</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="o">-</span><span class="n">current_end</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">vacancy</span><span class="o">&gt;</span><span class="n">current_max_vacancy</span><span class="p">)</span><span class="n">current_max_vacancy</span><span class="o">=</span><span class="n">vacancy</span><span class="p">;</span>

            <span class="kt">int</span> <span class="n">busy</span> <span class="o">=</span> <span class="n">current_end</span><span class="o">-</span><span class="n">current_start</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">busy</span><span class="o">&gt;</span><span class="n">current_max_busy</span><span class="p">)</span><span class="n">current_max_busy</span><span class="o">=</span><span class="n">busy</span><span class="p">;</span>

            <span class="n">current_start</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">first</span><span class="p">;</span>
            <span class="n">current_end</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">second</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="n">busy</span> <span class="o">=</span> <span class="n">current_end</span><span class="o">-</span><span class="n">current_start</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">busy</span><span class="o">&gt;</span><span class="n">current_max_busy</span><span class="p">)</span><span class="n">current_max_busy</span><span class="o">=</span><span class="n">busy</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">"%d %d"</span><span class="p">,</span><span class="n">current_max_busy</span><span class="p">,</span><span class="n">current_max_vacancy</span><span class="p">);</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<blockquote class="note">
  <p>不要忘记最后一组数据的判定</p>
</blockquote>
:ET