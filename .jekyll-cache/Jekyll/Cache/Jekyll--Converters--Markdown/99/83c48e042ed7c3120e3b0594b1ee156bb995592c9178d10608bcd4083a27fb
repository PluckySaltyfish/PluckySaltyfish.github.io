I"H7<h3 id="场景说明">场景说明</h3>

<p>在家想连学校服务器，由于学校服务器仅在内网开放，没有固定的公网IP，因此无法直接在外网中直接访问。现有的几种解决方案如下：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">学校提供的VPN</code> 但VPN存在速度慢并且不稳定的状况，而对于我校，部分没有申请加入VPN资源列表的服务器，也是访问不了的。</li>
  <li><code class="language-plaintext highlighter-rouge">远程控制软件</code>，以向日葵为代表的远程控制软件早在前些年被实验室的师兄师姐广泛使用。我实际没有用过，但我直觉上应该会有点卡。</li>
  <li><code class="language-plaintext highlighter-rouge">内网穿透</code>，这是我主要采用的方案，其原理是通过内网向拥有外网IP的服务器建立连接，可以将内网中的部分服务(如SSH)映射到外网服务器的端口上，当用户访问外网服务器的指定端口时，实际上是在访问内网的服务了。</li>
</ul>

<p>接下来我就主要介绍如何进行内网穿透的配置以及一些非必要的问题规避手段。</p>

<h3 id="需要内容">需要内容</h3>

<ul>
  <li>内网服务器的账号密码(学校服务器)</li>
  <li>一台拥有固定外网IP的服务器(阿里云学生机)</li>
  <li>内网穿透工具<a href="https://github.com/fatedier/frp/releases">frp</a></li>
  <li>校园网联网脚本</li>
</ul>

<h3 id="1-内网穿透配置">1 内网穿透配置</h3>

<p>这个网上教程一堆，我就主要说一些会遇到的问题。</p>

<h4 id="11-在外网服务器配置frp的server端">1.1 在外网服务器配置frp的server端</h4>

<blockquote>
  <p>要记得在外网的防火墙中开放frps.ini里的端口，以及frpc.ini中tcp服务中指定的端口</p>
</blockquote>

<p><strong>配置文件修改</strong>：</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># frps.ini
</span><span class="nn">[common]</span>
<span class="py">bind_port</span> <span class="p">=</span> <span class="s">1234</span>
<span class="py">vhost_http_port</span> <span class="p">=</span> <span class="s">4321</span>
</code></pre></div></div>

<p>这个<code class="language-plaintext highlighter-rouge">bind_port</code>是与你内网服务器建立连接的port，要与等会出现的client端的<code class="language-plaintext highlighter-rouge">server_port</code>对应。</p>

<p><code class="language-plaintext highlighter-rouge">vhost_http_port</code>是用于访问你内网建立的http服务的port，一般我是用于挂jupyter-lab以及偶尔的项目汇报的Web demo演示，后续介绍。</p>

<p><strong>启动</strong>：</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>frps <span class="nt">-c</span> frps.ini
</code></pre></div></div>

<h4 id="12--在学习器配置frp的client端">1.2  在学习器配置frp的client端</h4>

<p><strong>学校服务器联网</strong>：</p>

<p>用校园网的联网脚本联网，例如，我校校园网联网脚本如下：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#login.sh</span>
<span class="c">#!/bin/sh</span>

<span class="k">if</span> <span class="o">[</span> <span class="nv">$1</span> <span class="o">=</span> login <span class="o">]</span><span class="p">;</span> <span class="k">then</span> <span class="c"># login</span>
 <span class="nv">post_data</span><span class="o">=</span><span class="s1">'action=login&amp;username='</span><span class="o">=</span><span class="s1">'&amp;password=''&amp;ac_id=1&amp;user_ip=&amp;nas_ip=&amp;user_mac=&amp;save_me=1&amp;ajax=1'</span>
<span class="k">elif</span> <span class="o">[</span> <span class="nv">$1</span> <span class="o">=</span> <span class="nb">logout</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>  <span class="c"># logout</span>
    <span class="nv">post_data</span><span class="o">=</span><span class="s1">'action=logout&amp;username=''&amp;password=''&amp;ajax=1'</span>
<span class="k">fi

</span><span class="nv">url</span><span class="o">=</span><span class="s2">"http://10.0.0.55:801/include/auth_action.php"</span>
curl <span class="nt">-d</span> <span class="nv">$post_data</span> <span class="nv">$url</span> <span class="c"># send post request</span>
<span class="nb">echo</span> <span class="s2">""</span>
</code></pre></div></div>

<p>这种东西肯定有前辈写过。</p>

<p><strong>配置文件修改</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># frpc.ini</span>
<span class="o">[</span>common]
server_addr <span class="o">=</span> x.x.x.x <span class="c">#外网服务器的地址</span>
server_port <span class="o">=</span> 1234 <span class="c">#与frps.ini的bind_port对应</span>

<span class="o">[</span>ssh]
<span class="nb">type</span> <span class="o">=</span> tcp
local_ip <span class="o">=</span> 127.0.0.1
local_port <span class="o">=</span> 22
remote_port <span class="o">=</span> 5050 <span class="c">#设置的在外网远程访问ssh的端口</span>

<span class="o">[</span>web]
<span class="nb">type</span> <span class="o">=</span> http
local_port <span class="o">=</span> 8223 <span class="c">#你的web服务要启动在这个窗口</span>
custom_domains <span class="o">=</span> x.x.x.x <span class="c">#外网服务器的ip或域名</span>
</code></pre></div></div>

<p><strong>启动</strong>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>frpc <span class="nt">-c</span> frpc.ini
</code></pre></div></div>

<h4 id="13-访问">1.3 访问</h4>

<p>假如外网ip为<code class="language-plaintext highlighter-rouge">x.x.x.x</code>,你的内网账户名为<code class="language-plaintext highlighter-rouge">sunshine</code>,密码为<code class="language-plaintext highlighter-rouge">password</code>,其余配置如上所示，那么：</p>

<ul>
  <li>
    <p>ssh访问</p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-p</span> 5050 sunshine@x.x.x.x
<span class="o">&gt;</span> password
</code></pre></div>    </div>
  </li>
  <li>
    <p>web访问</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://x.x.x.x:4321
</code></pre></div>    </div>
  </li>
</ul>

<p>可以看出，具体该访问哪个端口的规则是，如果是tcp则访问由<code class="language-plaintext highlighter-rouge">frpc.ini</code>指定的端口，而是http连接则访问<code class="language-plaintext highlighter-rouge">frps.ini</code>指定的端口。</p>

<h3 id="2-内网穿透问题">2 内网穿透问题</h3>
<p><br /></p>
<h4 id="q1-保活问题">Q1 保活问题</h4>

<p>如何在后台一直运行frp而不挂断：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">screen</code>新建窗口运行</li>
  <li><code class="language-plaintext highlighter-rouge">nohup</code></li>
  <li>创建为系统服务（后续介绍）<br />
<br /></li>
</ul>

<h4 id="q2-多个client的情况">Q2 多个client的情况</h4>

<p>假如要把两台内网机映射到同一个外网服务器中，则可以在外网服务器中写两个<code class="language-plaintext highlighter-rouge">frps.ini</code>文件，同时运行两个服务端即可，端口不能冲突。<br />
<br /></p>

<h4 id="q3-多个web服务的情况">Q3 多个WEB服务的情况</h4>

<p>参考原github上的介绍，多个web的情况下，不同服务是通过域名区分的，对于没有域名的情况，可以将http连接改成tcp连接。<br />
<br /></p>
<h3 id="3-风险控制">3 风险控制</h3>

<p>由于我校教学楼经常进行停电维护，突然和实验室服务器失联的风险大大增加，以下列出我能想到的一些失联风险，并提供解决方案。</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">月初月末断网</code> 我校校园网在月末会清零，校园网账号处于不可用状态，仅在第二天用户重新续费时才能正常联网，这会使存在于内网服务器中的登录状态失效。frpc无法连接到外网服务器。</li>
  <li><code class="language-plaintext highlighter-rouge">停电</code> 我校中教不光停电维护不少，中教10楼还饱受着【厕所风扇短路导致全层停电】的折磨，如果frp是通过<code class="language-plaintext highlighter-rouge">screen</code>或<code class="language-plaintext highlighter-rouge">nohup</code>启动的话，将无法在停电再重启后使用。</li>
</ul>

<h4 id="31-frp服务设置开机启动">3.1 frp服务设置开机启动</h4>

<p>这里采用<code class="language-plaintext highlighter-rouge">systemd</code>时代的开机启动方法。</p>

<p>首先要创建一个frpc的服务，这个脚本好像下载的包里就有。</p>

<ul>
  <li>
    <p>创建一个新的服务<code class="language-plaintext highlighter-rouge">frpc.service</code></p>

    <div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vi /etc/systemd/system/frpc.service
</code></pre></div>    </div>
  </li>
  <li>
    <p>内容</p>

    <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[Unit]</span>
<span class="py">Description</span><span class="p">=</span><span class="s">Frp Client Service</span>
<span class="py">After</span><span class="p">=</span><span class="s">network.target</span>
  
<span class="nn">[Service]</span>
<span class="py">Type</span><span class="p">=</span><span class="s">simple</span>
<span class="py">User</span><span class="p">=</span><span class="s">nobody</span>
<span class="py">Restart</span><span class="p">=</span><span class="s">on-failure</span>
<span class="py">RestartSec</span><span class="p">=</span><span class="s">5s</span>
<span class="py">ExecStart</span><span class="p">=</span><span class="s">&lt;path&gt;/frp/frpc -c &lt;path&gt;/frp/frpc.ini</span>
<span class="py">ExecReload</span><span class="p">=</span><span class="s">&lt;path&gt;/frp/frpc reload -c &lt;path&gt;/frp/frpc.ini</span>
  
<span class="nn">[Install]</span>
<span class="py">WantedBy</span><span class="p">=</span><span class="s">multi-user.target</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>启动</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl start frpc <span class="c"># 启动一次，可以用于检查你的服务写错没有，stop是停止</span>
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>frpc <span class="c"># 设置开机自启动，disable是禁止</span>
<span class="nb">sudo </span>systemctl status frpc <span class="c"># 查看运行状态</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="32-定时联网服务">3.2 定时联网服务</h4>

<p>定时联网（这里设定的是每1h重连一次）的意义除了开机自启动，还可以解决校园网账号月初月末的断网问题，或由于同一账号的登录设备超出限制导致服务器端下线的问题。</p>

<p>这里和上面创建服务一样，先创建一个联网服务，只是其不会由开机触发，由一个定时器Timer触发，所以不用写Install部分：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vi /etc/systemd/system/run_login.service
</code></pre></div></div>

<p>内容：</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[Unit]</span>
<span class="py">Description</span><span class="p">=</span><span class="s">network restart service</span>

<span class="nn">[Service]</span>
<span class="py">ExecStart</span><span class="p">=</span><span class="s">/bin/bash &lt;path&gt;/login.sh login</span>
<span class="py">Restart</span><span class="p">=</span><span class="s">on-failure</span>
<span class="py">RestartSec</span><span class="p">=</span><span class="s">5</span>
</code></pre></div></div>

<p>然后创建一个同名的定时器<code class="language-plaintext highlighter-rouge">run_login.timer</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vi /etc/systemd/system/run_login.timer
</code></pre></div></div>

<p>内容：</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[Unit]</span>
<span class="py">Description</span><span class="p">=</span><span class="s">network restart every 1h</span>

<span class="nn">[Timer]</span>
<span class="py">OnUnitActiveSec</span><span class="p">=</span><span class="s">3600s</span>
<span class="py">Unit</span><span class="p">=</span><span class="s">run_login.service</span>

<span class="nn">[Install]</span>
<span class="py">WantedBy</span><span class="p">=</span><span class="s">multi-user.target</span>
</code></pre></div></div>

<p>然后设置开机启动就ok啦~</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>run_login.timer
</code></pre></div></div>

<hr />

<p>写在最后：即使做了这么多风险控制，如果停电了，服务器没人帮你按开机，似乎也不行。或许可以通过知道准确的来电时间设置定时开关机？</p>

<p><strong>记</strong>：</p>

<ul>
  <li>1月23日晚11：00停电，服务器在没有关闭的情况下，第二天来电时自动重启了。但这样的代价就是显卡驱动掉了，又重装了一遍，应该对机器不是很健康。下次停电前还是关机吧。</li>
</ul>

:ET